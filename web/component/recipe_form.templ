package component

import "gluttony/internal/recipe"
import "strconv"
import "fmt"

templ FormRecipe(form recipe.Form) {
	<form
		id="recipe-form"
		enctype="multipart/form-data"
		class="flex flex-1 flex-col gap-4 max-w-4xl"
		data-signals-errors.name=""
		data-on-signal-change="console.log($errors.name)"
	>
		<input type="hidden" name="id" value={ strconv.Itoa(int(form.ID)) }/>
		<div class="flex gap-8 flex-1 flex-wrap">
			<div class="form-control">
				<label for="cover-image">
					<span class="label">
						<span class="label-text">Thumbnail</span>
					</span>
				</label>
				@ImagePreview(form)
			</div>
			<div class="flex flex-col gap-4 w-xs flex-1">
				<label class="form-control">
					<span class="label">
						<span class="label-text">
							Title
							<span class="text-danger-11 ml-1 text-xs">(Required)</span>
						</span>
					</span>
					<input required class="input" name="name" value={ form.Name }/>
					<span class="text-danger-11 text-sm" data-show="$errors.name !== ''" data-text="$errors.name"></span>
				</label>
				<label class="form-control">
					<span class="label">
						<span class="label-text">Description</span>
					</span>
					<textarea rows="6" class="input resize-none" name="description">
						{ form.Description }
					</textarea>
				</label>
			</div>
		</div>
		@FormVisibility()
		@FormNutrition(form)
		@FormIngredients(form.Ingredients)
		<h2 class="text-2xl">Instructions</h2>
		<hr class="text-neutral-border-2 w-full"/>
		<div class="form-control w-226">
			<textarea
				id="instructions"
				aria-label="Instructions"
				rows="3"
				class="input max-h-[80dvh] min-h-[320px] w-full"
				name="instructions"
			>
				{ form.Instructions }
			</textarea>
		</div>
		@FormRecipeScripts()
	</form>
}

templ ImagePreview(form recipe.Form) {
	<div
		data-signals={ fmt.Sprintf("{file: null, imageUrl: '/media/%s'}", form.ThumbnailImageURL) }
		class="outline-primary-8 bg-neutral-layer-1 border-neutral-border-2 relative flex h-64 w-96 rounded-sm border focus-within:outline-2"
	>
		<input
			name="thumbnail-image-url"
			type="hidden"
			value={ form.ThumbnailImageURL }
		/>
		<input
			id="thumbnail-image"
			type="file"
			name="thumbnail-image"
			class="absolute inset-0 z-10 m-0 h-full w-full p-0 opacity-0 outline-none"
			data-on-change="file = evt.target.files[0]; fileToDataUrl(evt, url => $imageUrl = url )"
		/>
		<img
			class="absolute h-64 w-full rounded-sm object-cover"
			data-show="$imageUrl !== ''"
			data-attr-src="$imageUrl"
			alt="Image upload preview"
		/>
		<template data-show="$imageUrl === ''">
			<div class="flex flex-1 flex-col items-center justify-center gap-1">
				<p>
					<span class="underline">Click to upload</span> or drag & drop
					image
				</p>
				<p class="text-neutral-font-secondary">
					Maximum image size is 2 MB.
				</p>
			</div>
		</template>
	</div>
}

templ FormNutrition(form recipe.Form) {
	<div>
		<h2 class="m-0 text-2xl">Nutrition & Metadata</h2>
		<h3 class="text-neutral-font-secondary text-sm">
			Nutrition is calculated per
			<b class="text-neutral-font">single serving</b>
		</h3>
	</div>
	<hr class="text-neutral-border-2 w-full"/>
	<div class="flex gap-4">
		<div class="form-control gap-2">
			<div class="flex w-96 max-w-96 flex-col gap-4">
				<label class="form-control">
					<span class="label">
						<span class="label-text">Calories (kcal)</span>
					</span>
					<input
						min="0"
						class="input"
						name="calories"
						value={ form.Nutrition.Calories }
					/>
				</label>
				<label class="form-control">
					<span class="label">
						<span class="label-text">Fat (g)</span>
					</span>
					<input min="0" class="input" name="fat" value={ form.Nutrition.Fat }/>
				</label>
				<label class="form-control">
					<span class="label">
						<span class="label-text">Carbs (g)</span>
					</span>
					<input
						min="0"
						class="input"
						name="carbs"
						value={ form.Nutrition.Carbs }
					/>
				</label>
				<label class="form-control">
					<span class="label">
						<span class="label-text">Protein (g)</span>
					</span>
					<input
						min="0"
						class="input"
						name="protein"
						value={ form.Nutrition.Protein }
					/>
				</label>
			</div>
		</div>
		@MetadataColumn(form)
	</div>
}

templ MetadataColumn(form recipe.Form) {
	<div class="flex w-124 max-w-124 flex-col gap-4">
		<label class="form-control">
			<span class="label">
				<span class="label-text">
					Source
					<span class="text-danger-11 text-xs">(Required)</span>
				</span>
			</span>
			<input required class="input" name="source" value={ form.Source }/>
			<span class="hint">Website link, name of cookbook, friend etc.</span>
		</label>
		<div class="flex gap-4">
			<label class="form-control flex-1">
				<span class="label">
					<span class="label-text">Servings</span>
				</span>
				<input
					class="input w-full"
					type="number"
					name="servings"
					value={ form.Servings }
				/>
			</label>
			<label class="form-control flex-1">
				<span class="label">
					<span class="label-text">Preparation time</span>
				</span>
				<input
					name="preparation-time"
					class="input w-full"
					type="time"
					value={ form.PreparationTime }
				/>
			</label>
			<label class="form-control flex-1">
				<span class="label">
					<span class="label-text">Cook time</span>
				</span>
				<input
					name="cook-time"
					class="input w-full"
					type="time"
					value={ form.CookTime }
				/>
			</label>
		</div>
		{{ /* Tag input */ }}
		<div class="form-control">
			<span class="label">
				<span class="label-text">Tags</span>
			</span>
			<div
				class="bg-neutral-layer-1 border-neutral-border-2 flex flex-col gap-4 rounded-sm border p-3"
			>
				<div id="tags" class="flex flex-wrap min-h-6 gap-2">
					for _, value := range form.Tags {
						<button
							type="button"
							onclick="removeTag(event)"
							class="tag is-ghost-neutral hover:text-neutral-font cursor-pointer"
						>
							<input type="hidden" name="tag" value={ value }/>
							<span class="tag-text">{ value }</span>
							@IconX()
						</button>
					}
				</div>
				<template id="template-tag">
					<button
						type="button"
						onclick="removeTag(event)"
						class="tag is-ghost-neutral hover:text-neutral-font cursor-pointer"
					>
						<input type="hidden" name="tag"/>
						<span class="tag-text"></span>
						@IconX()
					</button>
				</template>
				<input
					id="form"
					aria-label="Tags"
					class="input bg-neutral-layer-2"
					placeholder="Add tag"
					list="tag-list"
					onkeydown="addTag(event)"
				/>
				<datalist id="tag-list">
					{{ /* TODO: data from backend */ }}
					<option>Dinner</option>
					<option>Breakfast</option>
				</datalist>
			</div>
		</div>
	</div>
}

templ FormVisibility() {
	<div>
		<div class="form-control">
			<span class="label">
				<span class="label-text">Visibility</span>
			</span>
			<div class="flex gap-4">
				<label class="flex cursor-pointer gap-2">
					<input
						type="radio"
						checked="checked"
						name="mode"
						class="radio"
						value="draft"
					/>
					<div class="flex flex-col">
						<span>Draft</span>
						<span class="text-neutral-font-secondary text-sm">
							Recipe will not be visible
						</span>
					</div>
				</label>
				<label class="flex cursor-pointer gap-2">
					<input type="radio" name="mode" class="radio" value="public"/>
					<div class="flex flex-col">
						<span>Public</span>
						<span class="text-neutral-font-secondary text-sm">
							Recipe will be visible for everyone
						</span>
					</div>
				</label>
			</div>
		</div>
	</div>
}

templ FormIngredients(ingredients []recipe.Ingredient) {
	<h2 class="text-2xl">Ingredients</h2>
	<hr class="text-neutral-border-2 w-full"/>
	<div class="flex w-full flex-col gap-4">
		<div id="ingredients" class="flex flex-col gap-4">
			for  _, ingredient := range ingredients {
				@FormIngredientRow(ingredient)
			}
		</div>
		<template id="template-ingredient-row">
			@FormIngredientRow(recipe.Ingredient{})
		</template>
		// TODO: data from backend
		<datalist id="ingredient-list">
			<option>Apple</option>
			<option>Pork</option>
		</datalist>
		<div class="flex w-224 justify-end">
			<button
				class="button is-ghost-neutral"
				type="button"
				onclick="addIngredientRow()"
			>
				Add ingredient
			</button>
		</div>
	</div>
}

templ FormIngredientRow(ingredient recipe.Ingredient) {
	<div class="flex w-full flex-1 gap-4">
		<div class="flex w-96 max-w-96 gap-4">
			<label class="form-control flex-1">
				if ingredient.Order == 0 {
					<span class="label">
						<span class="label-text">Quantity</span>
					</span>
				}
				<input
					class="input w-full"
					required
					name="quantity"
					type="number"
					min="0"
					step="0.25"
					value={ ingredient.Quantity }
				/>
			</label>
			<label class="form-control flex-2">
				<span class="label">
					<span class="label-text">Unit</span>
				</span>
				<select name="unit" class="input select w-full">
					<option
						value="tsp"
						selected?={ ingredient.Unit == "tsp" }
					>
						Teaspoon (tsp)
					</option>
					<option
						value="tbsp"
						selected?={ ingredient.Unit == "tbsp" }
					>
						Tablespoon (tbsp)
					</option>
					<option
						value="cup"
						selected={ ingredient.Unit == "cup" }
					>
						Cup
					</option>
					<option
						value="g"
						selected={ ingredient.Unit == "g" || ingredient.Unit == "" }
					>
						Grams (g)
					</option>
					<option
						value="ml"
						selected={ ingredient.Unit == "ml" }
					>
						Milliliters (ml)
					</option>
					<option
						value="count"
						selected={ ingredient.Unit == "count" }
					>
						Count
					</option>
				</select>
			</label>
		</div>
		<div class="flex w-60 max-w-60 gap-4">
			<label class="form-control w-full">
				if ingredient.Order == 0 {
					<span class="label">
						<span class="label-text">Name</span>
					</span>
				}
				<input
					class="input w-full"
					required
					name="ingredient"
					size="20"
					list="ingredient-list"
					autocomplete="off"
					value={ ingredient.Name }
				/>
			</label>
		</div>
		<div class="flex w-60 max-w-60 gap-4">
			<label class="form-control w-full">
				if ingredient.Order == 0 {
					<span class="label">
						<span class="label-text">Note</span>
					</span>
				}
				<input class="input w-full" name="note" value={ ingredient.Note }/>
			</label>
		</div>
	</div>
}

templ FormRecipeScripts() {
	<script>
    const fileToDataUrl = (event, callback) => {
      if (!event.target.files.length) return;

      let file = event.target.files[0],
        reader = new FileReader();

      reader.readAsDataURL(file);
      reader.onload = (e) => {
        callback(e.target.result);
        console.log(e)
      };
    };

    const removeTag = (event) => {
      event.target.closest('.tag').remove();
    };

    const addTag = (event) => {
      const isEnter = event.key === 'Enter' || event.keyCode === 13;
      if (!isEnter) {
        return;
      }

      event.preventDefault();

      const template = document.getElementById('template-tag');
      const newNode = template.content.cloneNode(true);
      newNode.querySelector('.tag-text').textContent = event.target.value;
      newNode.querySelector('input').value = event.target.value;
      document.getElementById('tags').appendChild(newNode);
      event.target.value = '';
    };

    const focusLastIngredientRow = () => {
      const focusTarget = document
        .getElementById('ingredients')
        .lastElementChild.querySelector('[name="quantity"]');

      focusTarget.focus();
      focusTarget.scrollIntoView();
    };

    const removeIngredientRow = (event) => {
      event.target.closest('.ingredient-row').remove();
      focusLastIngredientRow();
    };

    const addIngredientRow = () => {
      const template = document.getElementById('template-ingredient-row');
      const newNode = template.content.cloneNode(true);

      document.getElementById('ingredients').appendChild(newNode);
      focusLastIngredientRow();
    };

    const autoResizeTextarea = (event) => {
      if (event.target.scrollHeight <= 320) {
        return;
      }

      event.target.style.height = 'auto';
      event.target.style.height = `${event.target.scrollHeight}px`;
      event.target.scrollIntoView({ block: 'end' });
    };
  </script>
}
